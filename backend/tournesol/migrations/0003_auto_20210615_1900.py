# Generated by Django 3.2.3 on 2021-06-15 19:00

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('tournesol', '0002_alter_video_public_experts'),
    ]

    operations = [
        migrations.AddField(
            model_name='contributorvideorating',
            name='backfire_risk',
            field=models.FloatField(default=0, help_text='Resilience to backfiring risks'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='backfire_risk_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for backfire_risk'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='better_habits',
            field=models.FloatField(default=0, help_text='Encourages better habits'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='better_habits_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for better_habits'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='diversity_inclusion',
            field=models.FloatField(default=0, help_text='Diversity and Inclusion'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='diversity_inclusion_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for diversity_inclusion'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='engaging',
            field=models.FloatField(default=0, help_text='Engaging and thought-provoking'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='engaging_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for engaging'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='entertaining_relaxing',
            field=models.FloatField(default=0, help_text='Entertaining and relaxing'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='entertaining_relaxing_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for entertaining_relaxing'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='importance',
            field=models.FloatField(default=0, help_text='Important and actionable'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='importance_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for importance'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='largely_recommended',
            field=models.FloatField(default=0, help_text='Should be largely recommended'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='largely_recommended_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for largely_recommended'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='layman_friendly',
            field=models.FloatField(default=0, help_text='Layman-friendly'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='layman_friendly_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for layman_friendly'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='pedagogy',
            field=models.FloatField(default=0, help_text='Clear and pedagogical'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='pedagogy_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for pedagogy'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='reliability',
            field=models.FloatField(default=0, help_text='Reliable and not misleading'),
        ),
        migrations.AddField(
            model_name='contributorvideorating',
            name='reliability_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for reliability'),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='backfire_risk',
            field=models.FloatField(blank=True, default=None, help_text='Resilience to backfiring risks', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='backfire_risk_weight',
            field=models.FloatField(default=1, help_text='Resilience to backfiring risks weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='better_habits',
            field=models.FloatField(blank=True, default=None, help_text='Encourages better habits', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='better_habits_weight',
            field=models.FloatField(default=1, help_text='Encourages better habits weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='diversity_inclusion',
            field=models.FloatField(blank=True, default=None, help_text='Diversity and Inclusion', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='diversity_inclusion_weight',
            field=models.FloatField(default=1, help_text='Diversity and Inclusion weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='engaging',
            field=models.FloatField(blank=True, default=None, help_text='Engaging and thought-provoking', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='engaging_weight',
            field=models.FloatField(default=1, help_text='Engaging and thought-provoking weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='entertaining_relaxing',
            field=models.FloatField(blank=True, default=None, help_text='Entertaining and relaxing', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='entertaining_relaxing_weight',
            field=models.FloatField(default=1, help_text='Entertaining and relaxing weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='importance',
            field=models.FloatField(blank=True, default=None, help_text='Important and actionable', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='importance_weight',
            field=models.FloatField(default=1, help_text='Important and actionable weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='largely_recommended',
            field=models.FloatField(blank=True, default=None, help_text='Should be largely recommended', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='largely_recommended_weight',
            field=models.FloatField(default=1, help_text='Should be largely recommended weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='layman_friendly',
            field=models.FloatField(blank=True, default=None, help_text='Layman-friendly', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='layman_friendly_weight',
            field=models.FloatField(default=1, help_text='Layman-friendly weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='pedagogy',
            field=models.FloatField(blank=True, default=None, help_text='Clear and pedagogical', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='pedagogy_weight',
            field=models.FloatField(default=1, help_text='Clear and pedagogical weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='reliability',
            field=models.FloatField(blank=True, default=None, help_text='Reliable and not misleading', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertrating',
            name='reliability_weight',
            field=models.FloatField(default=1, help_text='Reliable and not misleading weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='backfire_risk',
            field=models.FloatField(blank=True, default=None, help_text='Resilience to backfiring risks', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='better_habits',
            field=models.FloatField(blank=True, default=None, help_text='Encourages better habits', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='diversity_inclusion',
            field=models.FloatField(blank=True, default=None, help_text='Diversity and Inclusion', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='engaging',
            field=models.FloatField(blank=True, default=None, help_text='Engaging and thought-provoking', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='entertaining_relaxing',
            field=models.FloatField(blank=True, default=None, help_text='Entertaining and relaxing', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='importance',
            field=models.FloatField(blank=True, default=None, help_text='Important and actionable', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='largely_recommended',
            field=models.FloatField(blank=True, default=None, help_text='Should be largely recommended', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='layman_friendly',
            field=models.FloatField(blank=True, default=None, help_text='Layman-friendly', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='pedagogy',
            field=models.FloatField(blank=True, default=None, help_text='Clear and pedagogical', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='expertratingsliderchanges',
            name='reliability',
            field=models.FloatField(blank=True, default=None, help_text='Reliable and not misleading', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='backfire_risk',
            field=models.FloatField(default=0, help_text='Resilience to backfiring risks'),
        ),
        migrations.AddField(
            model_name='video',
            name='backfire_risk_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for backfire_risk for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='backfire_risk_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for backfire_risk'),
        ),
        migrations.AddField(
            model_name='video',
            name='better_habits',
            field=models.FloatField(default=0, help_text='Encourages better habits'),
        ),
        migrations.AddField(
            model_name='video',
            name='better_habits_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for better_habits for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='better_habits_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for better_habits'),
        ),
        migrations.AddField(
            model_name='video',
            name='diversity_inclusion',
            field=models.FloatField(default=0, help_text='Diversity and Inclusion'),
        ),
        migrations.AddField(
            model_name='video',
            name='diversity_inclusion_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for diversity_inclusion for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='diversity_inclusion_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for diversity_inclusion'),
        ),
        migrations.AddField(
            model_name='video',
            name='engaging',
            field=models.FloatField(default=0, help_text='Engaging and thought-provoking'),
        ),
        migrations.AddField(
            model_name='video',
            name='engaging_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for engaging for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='engaging_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for engaging'),
        ),
        migrations.AddField(
            model_name='video',
            name='entertaining_relaxing',
            field=models.FloatField(default=0, help_text='Entertaining and relaxing'),
        ),
        migrations.AddField(
            model_name='video',
            name='entertaining_relaxing_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for entertaining_relaxing for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='entertaining_relaxing_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for entertaining_relaxing'),
        ),
        migrations.AddField(
            model_name='video',
            name='importance',
            field=models.FloatField(default=0, help_text='Important and actionable'),
        ),
        migrations.AddField(
            model_name='video',
            name='importance_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for importance for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='importance_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for importance'),
        ),
        migrations.AddField(
            model_name='video',
            name='largely_recommended',
            field=models.FloatField(default=0, help_text='Should be largely recommended'),
        ),
        migrations.AddField(
            model_name='video',
            name='largely_recommended_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for largely_recommended for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='largely_recommended_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for largely_recommended'),
        ),
        migrations.AddField(
            model_name='video',
            name='layman_friendly',
            field=models.FloatField(default=0, help_text='Layman-friendly'),
        ),
        migrations.AddField(
            model_name='video',
            name='layman_friendly_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for layman_friendly for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='layman_friendly_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for layman_friendly'),
        ),
        migrations.AddField(
            model_name='video',
            name='pedagogy',
            field=models.FloatField(default=0, help_text='Clear and pedagogical'),
        ),
        migrations.AddField(
            model_name='video',
            name='pedagogy_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for pedagogy for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='pedagogy_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for pedagogy'),
        ),
        migrations.AddField(
            model_name='video',
            name='reliability',
            field=models.FloatField(default=0, help_text='Reliable and not misleading'),
        ),
        migrations.AddField(
            model_name='video',
            name='reliability_quantile',
            field=models.FloatField(default=1.0, help_text='Top quantile for reliability for all rated videos for aggregated scores. 0.0=best, 1.0=worst', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)]),
        ),
        migrations.AddField(
            model_name='video',
            name='reliability_uncertainty',
            field=models.FloatField(default=0, help_text='Uncertainty for reliability'),
        ),
    ]
