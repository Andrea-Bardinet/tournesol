# Generated by Django 3.2.3 on 2021-06-20 11:06

import computed_property.fields
import core.utils.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0003_auto_20210615_1846'),
        ('tournesol', '0003_auto_20210615_1900'),
    ]

    operations = [
        migrations.CreateModel(
            name='Comparison',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('duration_ms', models.FloatField(default=0, help_text='Time it took to rate the videos (in milliseconds)', null=True)),
                ('datetime_lastedit', models.DateTimeField(blank=True, help_text='Time the comparison was edited the last time', null=True)),
                ('datetime_add', models.DateTimeField(auto_now_add=True, help_text='Time the comparison was added', null=True)),
                ('video_1_2_ids_sorted', computed_property.fields.ComputedCharField(compute_from='video_first_second', default=uuid.uuid1, editable=False, help_text='Sorted pair of video IDs', max_length=50)),
                ('largely_recommended', models.FloatField(blank=True, default=None, help_text='Should be largely recommended', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('largely_recommended_weight', models.FloatField(default=1, help_text='Should be largely recommended weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('reliability', models.FloatField(blank=True, default=None, help_text='Reliable and not misleading', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('reliability_weight', models.FloatField(default=1, help_text='Reliable and not misleading weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('importance', models.FloatField(blank=True, default=None, help_text='Important and actionable', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('importance_weight', models.FloatField(default=1, help_text='Important and actionable weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('engaging', models.FloatField(blank=True, default=None, help_text='Engaging and thought-provoking', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('engaging_weight', models.FloatField(default=1, help_text='Engaging and thought-provoking weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('pedagogy', models.FloatField(blank=True, default=None, help_text='Clear and pedagogical', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('pedagogy_weight', models.FloatField(default=1, help_text='Clear and pedagogical weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('layman_friendly', models.FloatField(blank=True, default=None, help_text='Layman-friendly', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('layman_friendly_weight', models.FloatField(default=1, help_text='Layman-friendly weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('diversity_inclusion', models.FloatField(blank=True, default=None, help_text='Diversity and Inclusion', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('diversity_inclusion_weight', models.FloatField(default=1, help_text='Diversity and Inclusion weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('backfire_risk', models.FloatField(blank=True, default=None, help_text='Resilience to backfiring risks', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('backfire_risk_weight', models.FloatField(default=1, help_text='Resilience to backfiring risks weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('better_habits', models.FloatField(blank=True, default=None, help_text='Encourages better habits', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('better_habits_weight', models.FloatField(default=1, help_text='Encourages better habits weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('entertaining_relaxing', models.FloatField(blank=True, default=None, help_text='Entertaining and relaxing', null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('entertaining_relaxing_weight', models.FloatField(default=1, help_text='Entertaining and relaxing weight', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(8)])),
                ('user', models.ForeignKey(help_text='Contributor (user) who left the rating', on_delete=django.db.models.deletion.CASCADE, to='core.user')),
            ],
            bases=(models.Model, core.utils.models.WithFeatures, core.utils.models.WithDynamicFields),
        ),
        migrations.RenameModel(
            old_name='ExpertRatingSliderChanges',
            new_name='ComparisonSliderChanges',
        ),
        migrations.RenameField(
            model_name='video',
            old_name='public_experts',
            new_name='public_contributors',
        ),
        migrations.RemoveField(
            model_name='video',
            name='n_private_experts',
        ),
        migrations.RemoveField(
            model_name='video',
            name='n_public_experts',
        ),
        migrations.RemoveField(
            model_name='video',
            name='rating_n_experts',
        ),
        migrations.AddField(
            model_name='video',
            name='n_private_contributors',
            field=computed_property.fields.ComputedIntegerField(compute_from='get_n_private_contributors', default=0, editable=False, help_text='Number of certified contributors who rated this video privately'),
        ),
        migrations.AddField(
            model_name='video',
            name='n_public_contributors',
            field=computed_property.fields.ComputedIntegerField(compute_from='get_n_public_contributors', default=0, editable=False, help_text='Number of certified contributors who rated this video publicly'),
        ),
        migrations.AddField(
            model_name='video',
            name='rating_n_contributors',
            field=computed_property.fields.ComputedIntegerField(compute_from='get_rating_n_contributors', default=0, editable=False, help_text='Total number of certified contributors who rated the video'),
        ),
        migrations.AlterField(
            model_name='contributorvideorating',
            name='user',
            field=models.ForeignKey(help_text='The contributor', on_delete=django.db.models.deletion.CASCADE, related_name='contributorvideoratings', to='core.user'),
        ),
        migrations.DeleteModel(
            name='ExpertRating',
        ),
        migrations.AddField(
            model_name='comparison',
            name='video_1',
            field=models.ForeignKey(help_text='Left video to compare', on_delete=django.db.models.deletion.CASCADE, related_name='comparison_video_1', to='tournesol.video'),
        ),
        migrations.AddField(
            model_name='comparison',
            name='video_2',
            field=models.ForeignKey(help_text='Right video to compare', on_delete=django.db.models.deletion.CASCADE, related_name='comparison_video_2', to='tournesol.video'),
        ),
        migrations.AddConstraint(
            model_name='comparison',
            constraint=models.CheckConstraint(check=models.Q(('video_1', django.db.models.expressions.F('video_2')), _negated=True), name='videos_cannot_be_equal'),
        ),
        migrations.AlterUniqueTogether(
            name='comparison',
            unique_together={('user', 'video_1_2_ids_sorted')},
        ),
    ]
